{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde9 jinja-i18n-tools","text":"<p>Automated i18n tool for Jinja2-based projects using Babel and Google Translate.</p>"},{"location":"#features","title":"\ud83d\udce6 Features","text":"<ul> <li>\ud83d\udd0d Extract translatable strings from your Jinja2 templates.</li> <li>\ud83c\udf10 Initialize <code>.po</code> files for multiple languages.</li> <li>\ud83e\udd16 Auto-translate using Google Translate via <code>deep_translator</code>.</li> <li>\ud83d\udee0\ufe0f Compile <code>.po</code> files into <code>.mo</code>.</li> <li>\ud83e\uddf9 Automatically cleans up temporary files like <code>messages.pot</code> and <code>babel.cfg</code>.</li> </ul>"},{"location":"#installation","title":"\u2699\ufe0f Installation","text":"<pre><code>pip install jinja-i18n-tools\n</code></pre>"},{"location":"#usage","title":"\ud83d\ude80 Usage","text":"<p>Activate your virtual environment, then run:</p> <pre><code>jinja-i18n full\n</code></pre> <p>This will: 1. Copy <code>babel.cfg</code> to your project root. 2. Extract translatable strings from your templates. 3. Initialize translation files for each language. 4. Auto-translate all strings. 5. Compile <code>.po</code> files into <code>.mo</code>. 6. Clean up temporary files.</p>"},{"location":"#cli-commands","title":"\ud83d\udee0\ufe0f CLI Commands","text":"<pre><code>jinja-i18n extract\njinja-i18n init\njinja-i18n translate --lang ar\njinja-i18n translate-all\njinja-i18n compile\njinja-i18n full --lang all --force\n</code></pre>"},{"location":"#languages","title":"\ud83c\udf0d Languages","text":"<p>By default, the following languages are supported:</p> <ul> <li><code>ar</code> \u2013 Arabic</li> <li><code>de</code> \u2013 German</li> </ul> <p>You can customize this in the source by editing the <code>LANGUAGES</code> list.</p>"},{"location":"#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<p>Your Jinja2 templates and Python files must be located where your <code>babel.cfg</code> expects them. Here's a recommended configuration:</p> <pre><code>[python: **.py]\n[jinja2: templates/**.html]\n[jinja2: templates/**.j2] \nextensions=jinja2.ext.i18n\n</code></pre> <p>This configuration instructs <code>pybabel</code> to:</p> <ul> <li>Extract translation strings from all Python files recursively.</li> <li>Extract translatable content from all <code>.html</code> templates under the <code>templates/</code> folder.</li> <li>Enable the <code>jinja2.ext.i18n</code> extension to support <code>{% trans %}</code> blocks.</li> </ul> <p>Make sure this file (<code>babel.cfg</code>) is located in your project root temporarily, or is copied automatically by the tool before running <code>pybabel extract</code>.</p>"},{"location":"#cleanup","title":"\ud83e\uddfc Cleanup","text":"<p>Temporary files like <code>babel.cfg</code> and <code>messages.pot</code> are deleted automatically after the process finishes.</p>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License. You are free to use, modify, and distribute it with attribution. Feel free to explore and build upon it!</p>"},{"location":"#about-the-author","title":"\ud83d\udc68\u200d\ud83d\udcbb About the Author","text":"<p>\ud83c\udfaf Tamer OnLine \u2013 Developer &amp; Architect A dedicated software engineer and educator with a focus on building multilingual, modular, and open-source applications using Python, Flask, and PostgreSQL.</p> <p>\ud83d\udd39 Founder of Flask University \u2013 an initiative to create real-world, open-source Flask projects \ud83d\udd39 Creator of @TamerOnPi \u2013 a YouTube channel sharing tech, tutorials, and Pi Network insights \ud83d\udd39 Passionate about helping developers learn by building, one milestone at a time</p> <p>Connect or contribute:</p> <p> </p> <p>\ud83d\udca1 Got feedback or want to collaborate? Open an issue, fork the repo, or just say hi on LinkedIn!</p>"},{"location":"about/","title":"\ud83d\udc4b About Jinja UI","text":"<p>Jinja UI is an open-source UI component library built using Jinja2 templating system.</p>"},{"location":"about/#description","title":"\ud83d\udd0d Description","text":"<p>A reusable UI component system powered by Jinja2.</p>"},{"location":"about/#author","title":"\ud83d\udc64 Author","text":"<ul> <li>Tamer Hamad Faour</li> <li>GitHub: https://github.com/TamerOnLine/jinja-ui</li> </ul> <p>\u00a9 2025 Tamer Hamad Faour \u2013 All rights reserved.</p>"},{"location":"gh-pages/","title":"\ud83c\udf10 GitHub Pages Deployment Guide","text":"<p>This guide explains how to deploy documentation using MkDocs and publish it via GitHub Pages (<code>gh-pages</code> branch).</p>"},{"location":"gh-pages/#what-is-gh-pages","title":"\ud83d\udcd8 What is <code>gh-pages</code>?","text":"<p><code>gh-pages</code> is a special branch on GitHub used to host static websites directly from your repository. You can use it to publish documentation, blogs, or project pages without any external server.</p>"},{"location":"gh-pages/#requirements","title":"\u2699\ufe0f Requirements","text":"<ul> <li>A GitHub repository.</li> <li>A documentation folder (e.g., <code>docs/</code> or <code>src/docs/</code>).</li> <li>A <code>mkdocs.yml</code> configuration file.</li> <li>GitHub Pages enabled from repository settings.</li> </ul>"},{"location":"gh-pages/#setup-steps","title":"\ud83d\udd27 Setup Steps","text":""},{"location":"gh-pages/#1-create-mkdocsyml","title":"1\ufe0f\u20e3 Create <code>mkdocs.yml</code>","text":"<pre><code>site_name: Your Project Docs\ndocs_dir: src/docs\ntheme:\n  name: material\n</code></pre>"},{"location":"gh-pages/#2-create-gh-pages-requirementstxt-optional","title":"2\ufe0f\u20e3 Create <code>gh-pages-requirements.txt</code> (optional)","text":"<pre><code>mkdocs\nmkdocs-material\n</code></pre>"},{"location":"gh-pages/#3-setup-github-actions","title":"3\ufe0f\u20e3 Setup GitHub Actions","text":"<p>Create a file at <code>.github/workflows/docs.yml</code>:</p> <pre><code>name: \ud83d\udcd8 Build and Deploy MkDocs\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: \ud83d\udd01 Checkout repository\n        uses: actions/checkout@v3\n\n      - name: \ud83d\udc0d Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.12'\n\n      - name: \ud83d\udce6 Install dependencies\n        run: |\n          pip install -r gh-pages-requirements.txt\n\n      - name: \ud83d\ude80 Deploy MkDocs to GitHub Pages\n        env:\n          GIT_COMMITTER_NAME: github-actions[bot]\n          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git config --global user.name \"$GIT_COMMITTER_NAME\"\n          git config --global user.email \"$GIT_COMMITTER_EMAIL\"\n          mkdocs gh-deploy --force\n</code></pre>"},{"location":"gh-pages/#4-enable-github-pages","title":"4\ufe0f\u20e3 Enable GitHub Pages","text":"<p>Go to: Settings \u2192 Pages \u2192 Source \u2192 Deploy from a branch \u2192 <code>gh-pages</code> + root folder, then click Save.</p>"},{"location":"gh-pages/#your-documentation-will-be-live-at","title":"\ud83c\udf0d Your documentation will be live at:","text":"<pre><code>https://&lt;username&gt;.github.io/&lt;repository-name&gt;/\n</code></pre> <p>Example:</p> <pre><code>https://tameronline.github.io/jinja-ui/\n</code></pre>"},{"location":"gh-pages/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Every push to <code>main</code> triggers an update.</li> <li>Do not manually edit the <code>gh-pages</code> branch.</li> <li>You can enhance <code>mkdocs.yml</code> with logo, nav, colors, plugins, and more.</li> </ul>"},{"location":"gh-pages/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material for MkDocs</li> <li>GitHub Pages Guide</li> </ul>"},{"location":"license/","title":"\ud83d\udcc4 License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Tamer Hamad Faour\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"cli/usage/","title":"CLI Usage","text":"<p>This section describes how to use the command-line interface (CLI).</p>"},{"location":"cli/usage/#jinja-i18n-tools-help","title":"<code>jinja-i18n-tools --help</code>","text":"<p>\u26a0\ufe0f Failed to generate help for <code>jinja-i18n-tools --help</code></p> <pre><code>Traceback (most recent call last):\n  File \"&lt;frozen runpy&gt;\", line 198, in _run_module_as_main\n  File \"&lt;frozen runpy&gt;\", line 88, in _run_code\n  File \"T:\\jinja-ui\\venv\\Lib\\site-packages\\jinja_i18n_tools\\__main__.py\", line 4, in &lt;module&gt;\n    main()\n  File \"T:\\jinja-ui\\venv\\Lib\\site-packages\\jinja_i18n_tools\\cli.py\", line 46, in main\n    args = parser.parse_args()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 1904, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 1914, in parse_known_args\n    return self._parse_known_args2(args, namespace, intermixed=False)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 1943, in _parse_known_args2\n    namespace, args = self._parse_known_args(args, namespace, intermixed)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 2184, in _parse_known_args\n    start_index = consume_optional(start_index)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 2113, in consume_optional\n    take_action(action, args, option_string)\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 2018, in take_action\n    action(self, namespace, argument_values, option_string)\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 1148, in __call__\n    parser.print_help()\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 2621, in print_help\n    self._print_message(self.format_help(), file)\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\argparse.py\", line 2627, in _print_message\n    file.write(message)\n  File \"C:\\Users\\Tamer\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\encodings\\cp1252.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u2192' in position 511: character maps to &lt;undefined&gt;\n</code></pre>"},{"location":"cli/usage/#jinja-i18n-tools-extract-help","title":"<code>jinja-i18n-tools extract --help</code>","text":"<pre><code>usage: __main__.py extract [-h]\n\noptions:\n  -h, --help  show this help message and exit\n</code></pre>"},{"location":"cli/usage/#jinja-i18n-tools-compile-help","title":"<code>jinja-i18n-tools compile --help</code>","text":"<pre><code>usage: __main__.py compile [-h]\n\noptions:\n  -h, --help  show this help message and exit\n</code></pre>"},{"location":"cli/usage/#jinja-i18n-tools-translate-help","title":"<code>jinja-i18n-tools translate --help</code>","text":"<pre><code>usage: __main__.py translate [-h] --lang LANG [--force]\n\noptions:\n  -h, --help   show this help message and exit\n  --lang LANG\n  --force\n</code></pre>"},{"location":"cli/usage/#jinja-i18n-tools-translate-all-help","title":"<code>jinja-i18n-tools translate-all --help</code>","text":"<pre><code>usage: __main__.py translate-all [-h]\n\noptions:\n  -h, --help  show this help message and exit\n</code></pre>"},{"location":"cli/usage/#jinja-i18n-tools-init-help","title":"<code>jinja-i18n-tools init --help</code>","text":"<pre><code>usage: __main__.py init [-h]\n\noptions:\n  -h, --help  show this help message and exit\n</code></pre>"},{"location":"cli/usage/#jinja-i18n-tools-full-help","title":"<code>jinja-i18n-tools full --help</code>","text":"<pre><code>usage: __main__.py full [-h] [--lang LANG] [--force]\n\noptions:\n  -h, --help   show this help message and exit\n  --lang LANG  Language to translate (or 'all')\n  --force\n</code></pre>"}]}